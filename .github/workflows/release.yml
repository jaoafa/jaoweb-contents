name: Release

on:
  push:
    branches:
      - main
      - feat/build-workflow

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - name: Clone jaoafa/jaoweb
        uses: actions/checkout@v2
        with:
          repository: jaoafa/jaoweb

      - name: Remove content
        run: rm -rf content

      - name: Clone jaoafa/jaoweb-docs
        uses: actions/checkout@v2
        with:
          path: content

      - name: Download authors.json & categories.json
        run: |
          wget -O content/blog/authors.json https://raw.githubusercontent.com/jaoafa/jaoweb/master/content/blog/authors.json
          wget -O content/blog/categories.json https://raw.githubusercontent.com/jaoafa/jaoweb/master/content/blog/categories.json

      - uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache node_modules
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn

      - name: Nuxt build
        run: yarn cross-env NUXT_TELEMETRY_DISABLED=1 nuxt build

      - name: Nuxt generate
        run: yarn cross-env NUXT_TELEMETRY_DISABLED=1 nuxt generate

      - name: Check exists dist
        run: test -f dist

      - name: Set jaoweb SHORT_SHA
        id: jaoweb-vars
        run: |
          echo "::set-output name=SHORT_SHA::$(git rev-parse --short HEAD)"

      - name: Set Content SHORT_SHA
        id: content-vars
        working-directory: ./content
        run: echo "::set-output name=SHORT_SHA::$(git rev-parse --short HEAD)"

      - name: Create dist zip
        working-directory: ./dist
        run: zip dist.zip .

      - name: Create a Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.vars.outputs.SHORT_SHA }}
          release_name: Release ${{ steps.date.outputs.date }} - (v${{ steps.vars.outputs.SHORT_SHA }})
          draft: false
          prerelease: true

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist.zip
          asset_name: dist.zip
          asset_content_type: application/zip

      - name: Released comment
        uses: actions/github-script@v4
        with:
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `# リリースが完了しました\n\n${{ steps.create_release.outputs.html_url }}`
            })